#+TITLE: XAR EMACS CONFIG
#+AUTHOR: Mathieu 'xar' Nativel
#+EMAIL: mn@xar.re

* General
** Backup
   Stop creating random ~ or ## files everywhere.
   The backup files are now stored in .saves.
   #+BEGIN_SRC emacs-lisp
   (setq
      backup-by-copying t
      backup-directory-alist
      '(("." . "~/.emacs.d/backup"))
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)
   (setq auto-save-file-name-transforms
      `((".*" "~/.emacs.d/autosaves" t)))
   #+END_SRC
** Misc
   Disable all kinds of bar.
  #+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (global-linum-mode)
  (column-number-mode)
  (setq-default indent-tabs-mode nil)
  (setq indent-tabs-mode nil)
  (windmove-default-keybindings)
  (scroll-bar-mode -1)
  (global-hl-line-mode)
  #+END_SRC
** Info
   #+BEGIN_SRC emacs-lisp
   (setq user-full-name "Mathieu 'xar' Nativel"
         user-mailaddress "mn@xar.re")
   #+END_SRC
** Custom function
   Kill all buffers but the current one.
   #+BEGIN_SRC emacs-lisp
   (defun kill-other-buffers()
        "Kill all other buffers."
        (interactive)
        (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
   #+END_SRC
* Prog config
** General
   Basic C configuration fitting EPITA coding style.
   #+BEGIN_SRC emacs-lisp
   (setq c-basic-offset 8
         c-default-style "bsd" ; from EPITA PIE
         fill-column 80)
   (setq whitespace-style '(face ; show:
                            trailing))
   (add-hook 'prog-mode-hook (lambda () (whitespace-mode 1)))
;;   (add-hook 'prog-mode-hook (lambda () (read-only-mode 1)))
   #+END_SRC
** Common lisp
   #+BEGIN_SRC emacs-lisp
   ;(load (expand-file-name "~/.quicklisp/slime-helper.el"))
   ;(setq inferior-lisp-program "sbcl")
   #+END_SRC
** Compilation buffer
   #+BEGIN_SRC emacs-lisp
   (require 'ansi-color)
   (defun colorize-compilation-buffer ()
   (let ((inhibit-read-only t))
   (ansi-color-apply-on-region (point-min) (point-max))))
   (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
   #+END_SRC
* Packages
** Packages sources
   #+BEGIN_SRC emacs-lisp
   (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                            ("melpa" . "https://melpa.org/packages/")))
   #+END_SRC
** use-package
   The package refresh contents line, refresh your contents each time you load emacs.
   That way it can be quite annoying if you're not using emacs as a daemon and if you launch it multiple times through the day.
   #+BEGIN_SRC emacs-lisp
   (package-initialize)
   (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))
   (require 'use-package)
   (require 'use-package-ensure)
   (setq use-package-always-ensure t)
   (setq use-package-verbose t)
   (setq use-package-always-ensure t)
   (use-package auto-compile
      :config
      (auto-compile-on-load-mode))
   (setq load-prefer-newer t)
   #+END_SRC
** package lists
   #+BEGIN_SRC emacs-lisp
   (use-package magit)
   (use-package treemacs)
   (use-package org)
   (use-package org-bullets)
   (use-package rainbow-delimiters)
   (use-package projectile)
   (use-package helm)
   (use-package helm-rtags)
   (use-package helm-rg)
   (use-package helm-projectile)
   (use-package go-mode)
   (use-package markdown-mode)
   (use-package doom-themes)
   (use-package ox-reveal)
;; (use-package real-gud)
   (use-package f)
   (use-package company)
   (use-package company-ctags)
   (use-package emojify)
   (use-package clang-format)
   (use-package rtags
     :ensure t
     :config (setq rtags-path "~/.emacs.d/elpa/rtags-20210313.1541/rtags-2.38/bin"
                   rtags-use-helm t
                   rtags-completion-enabled t
                   rtags-display-result-backend 'helm
                   rtags-autostart-diagnostics t))
   (use-package company-rtags)
   (use-package irony-mode)
   (use-package company-irony)
   (use-package company-irony-c-headers)
   (use-package flycheck)
   (use-package flycheck-irony)
   (use-package cmake-ide)
   #+END_SRC
* Specific package configuration
** Org-mode
   Global keybindings and org mode configuration
   #+BEGIN_SRC emacs-lisp
   (require 'org)
   (define-key org-mode-map (kbd "C-c a") 'org-agenda)
   (define-key org-mode-map (kbd "C-c l") 'org-store-link)
   (setq org-log-done t)  ; log data/time when todo is set to done
   #+END_SRC
   Org mode hook with org bullets:
   #+BEGIN_SRC emacs-lisp
   (require 'org-bullets)
   (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1)))
   (add-hook 'org-mode-hook (lambda() (visual-line-mode 1)))
   #+END_SRC
   Make windmove work also with org mode. [[https://orgmode.org/manual/Conflicts.html][org mode doc]]
   #+BEGIN_SRC emacs-lisp   
   (add-hook 'org-shiftup-final-hook 'windmove-up)
   (add-hook 'org-shiftleft-final-hook 'windmove-left)
   (add-hook 'org-shiftdown-final-hook 'windmove-down)
   (add-hook 'org-shiftright-final-hook 'windmove-right)
   #+END_SRC emacs-lisp
   Highlight code when converting to pdf with latex:
   #+BEGIN_SRC emacs-lisp
   (require 'ox-latex)
   (add-to-list 'org-latex-packages-alist '("" "minted"))
   (setq org-latex-listings 'minted)
   (setq org-latex-pdf-process
   '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
     "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
     "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
   (setq org-src-fontify-natively t)
   #+END_SRC
** Projectile
   #+BEGIN_SRC emacs-lisp
   (require 'projectile)
   (define-key projectile-mode-map (kbd "C-c p") projectile-command-map)
   (projectile-mode +1)
   #+END_SRC
** Helm
   #+BEGIN_SRC emacs-lisp
   (require 'helm-projectile)
   (helm-projectile-on)
   #+END_SRC
** Rainbow-delimiters
   #+BEGIN_SRC emacs-lisp
   (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
   #+END_SRC
** Clang-format
   #+BEGIN_SRC emacs-lisp
   (require 'clang-format)
   (setq clang-format-style "file")
   (defun clang-format-buffer-smart () ;; thx eklitzke
     "Reformat the buffer only if project root contains .clang-format"
     (when (f-exists? (expand-file-name ".clang-format" (projectile-project-root)))
       (clang-format-buffer)))
   (add-hook 'c-mode-common-hook
     (function (lambda ()
     (add-hook 'before-save-hook 'clang-format-buffer-smart))))
   #+END_SRC emacs-lisp
** Fancy ide stuffs
   #+BEGIN_SRC emacs-lisp
   (require 'rtags)
   (require 'company-rtags)
   (eval-after-load 'company
       '(add-to-list
         'company-backends 'company-rtags))
   (rtags-enable-standard-keybindings)

   (add-hook 'c++-mode-hook 'irony-mode)
   (add-hook 'c-mode-hook 'irony-mode)

   (defun my-irony-mode-hook ()
     (define-key irony-mode-map [remap completion-at-point]
       'irony-completion-at-point-async)
     (define-key irony-mode-map [remap complete-symbol]
       'irony-completion-at-point-async))

   (add-hook 'irony-mode-hook 'my-irony-mode-hook)
   (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
   (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)
   (setq company-backends (delete 'company-semantic company-backends))
   (eval-after-load 'company
     '(add-to-list
       'company-backends 'company-irony))

   (setq company-idle-delay 0)
   (define-key c-mode-map [(tab)] 'company-complete)
   (define-key c++-mode-map [(tab)] 'company-complete)

   (eval-after-load 'company
     '(add-to-list
       'company-backends 'company-irony))
   (require 'company-irony-c-headers)
   (eval-after-load 'company
     '(add-to-list
       'company-backends '(company-irony-c-headers company-irony)))

   (add-hook 'c++-mode-hook 'flycheck-mode)
   (add-hook 'c-mode-hook 'flycheck-mode)

   (require 'flycheck-rtags)

   (defun my-flycheck-rtags-setup ()
     (flycheck-select-checker 'rtags)
     (setq-local flycheck-highlighting-mode nil)
     (setq-local flycheck-check-syntax-automically nil))
   (add-hook 'c-mode-common-hook #'my-flycheck-rtags-setup)
   (eval-after-load 'flycheck
      '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))

   (cmake-ide-setup)
   #+END_SRC emacs-lisp
* Keybindings
** Helm
   #+BEGIN_SRC emacs-lisp
   (require 'helm-config)
   (define-key helm-map (kbd "TAB") 'helm-execute-persistent-action)
   (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
   (define-key helm-map (kbd "C-z") 'helm-select-action)

   (global-set-key (kbd "M-x") 'helm-M-x)
   (global-set-key (kbd "C-x r b") 'helm-filtered-bookmarks)
   (global-set-key (kbd "C-x C-f") 'helm-find-files)
   (global-set-key (kbd "C-x b") 'helm-mini)
   #+END_SRC
** Code navigation
   #+BEGIN_SRC emacs-lisp
   (require 'rtags)
   (define-key c-mode-map  (kbd "C-x g") 'rtags-find-symbol-at-point)
   (define-key c++-mode-map (kbd "C-x g") 'rtags-find-symbol-at-point)
   #+END_SRC emacs-lisp
** Misc
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-c g") 'magit-status)
   (global-set-key (kbd "C-c t") 'treemacs)
   (global-set-key (kbd "M-s M-s") 'whitespace-mode)
   (global-set-key (kbd "C-c p") 'company-complete)
   #+END_SRC
* Theme
  #+BEGIN_SRC emacs-lisp
  (load-theme 'doom-one t)
  (add-to-list 'default-frame-alist
               '(font . "Fira Code Medium-11"))
  #+END_SRC
