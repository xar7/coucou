#+AUTHOR: Mathieu 'xar' Nativel
#+TITLE: XAR EMACS CONFIG
#+EMAIL: mn@xar.re

* General
** Backup
   Stop creating random ~ or ## files everywhere.
   The backup files are now stored in .saves.
   #+BEGIN_SRC emacs-lisp
   (setq
      backup-by-copying t
      backup-directory-alist
      '(("." . "~/.emacs.d/backup"))
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)
   (setq auto-save-file-name-transforms
      `((".*" "~/.emacs.d/autosaves" t)))
   #+END_SRC
** Misc
   Disable all kinds of bar.
  #+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (global-display-line-numbers-mode 1)
  (column-number-mode)
  (setq-default indent-tabs-mode nil)
  (setq indent-tabs-mode nil)
  (windmove-default-keybindings)
  (scroll-bar-mode -1)
  (global-hl-line-mode)
  #+END_SRC
** Info
   #+BEGIN_SRC emacs-lisp
   (setq user-full-name "Mathieu 'xar' Nativel"
         user-mailaddress "mn@xar.re")
   #+END_SRC
** Custom function
   Kill all buffers but the current one.
   #+BEGIN_SRC emacs-lisp
   (defun kill-other-buffers()
        "Kill all other buffers."
        (interactive)
        (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
   #+END_SRC
* Prog config
** General
   Basic C configuration fitting EPITA coding style.
   #+BEGIN_SRC emacs-lisp
   (setq c-basic-offset 3
         c-default-style "bsd"
         fill-column 80)
   (setq whitespace-style '(face ; show:
                            trailing))
   (add-hook 'prog-mode-hook (lambda () (whitespace-mode 1)))
;;   (add-hook 'prog-mode-hook (lambda () (read-only-mode 1)))
   #+END_SRC
** Common lisp
   #+BEGIN_SRC emacs-lisp
   ;(load (expand-file-name "~/.quicklisp/slime-helper.el"))
   ;(setq inferior-lisp-program "sbcl")
   #+END_SRC
** Compilation buffer
   #+BEGIN_SRC emacs-lisp
   (require 'ansi-color)
   (defun colorize-compilation-buffer ()
   (let ((inhibit-read-only t))
   (ansi-color-apply-on-region (point-min) (point-max))))
   (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
   #+END_SRC
* Packages
** Packages sources
   #+BEGIN_SRC emacs-lisp
   (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                            ("melpa" . "https://melpa.org/packages/")))
   #+END_SRC
** use-package
   The package refresh contents line, refresh your contents each time you load emacs.
   That way it can be quite annoying if you're not using emacs as a daemon and if you launch it multiple times through the day.
   #+BEGIN_SRC emacs-lisp
   (package-initialize)
   (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))
   (require 'use-package)
   (require 'use-package-ensure)
   (setq use-package-always-ensure t)
   (setq use-package-verbose t)
   (setq use-package-always-ensure t)
   (use-package auto-compile
      :config
      (auto-compile-on-load-mode))
   (setq load-prefer-newer t)
   #+END_SRC
** package lists
   #+BEGIN_SRC emacs-lisp
     (use-package magit)
     (use-package treemacs)
     (use-package org)
     (use-package org-bullets)
     (use-package rainbow-delimiters)
     (use-package projectile)
     (use-package helm)
     (use-package helm-rg)
     (use-package helm-projectile)
     (use-package go-mode)
     (use-package markdown-mode)
     (use-package doom-themes)
     (use-package ox-reveal)
     ;;   (use-package real-gud)
     (use-package f)
     (use-package company)
     ;;   (use-package emojify)
     (use-package clang-format)
     (use-package flycheck)
     (use-package csharp-mode)
     (use-package visual-regexp)
     (use-package lsp-mode
       :init
       ;; set the prefix for lsp-command-keymap
       (setq lsp-keymap-prefix "C-c l")
       (setq lsp-clients-clangd-executable (executable-find "clangd"))
       (setq lsp-pyls-server-command "/home/xar/.local/bin/pylsp")
       :hook (c++-mode . lsp)
       :hook (csharp-mode . lsp)
       :hook (rust-mode . lsp)
       :commands (lsp lsp-deferred))
     (use-package lsp-ui :commands lsp-ui-mode)
     (use-package helm-lsp :commands helm-lsp-workspace-symbol)
     (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
     (use-package cmake-mode)
     (use-package protobuf-mode)
     (use-package tree-sitter)
     (use-package tree-sitter-langs)
     (use-package py-autopep8)
     (use-package python-black
       :demand t
       :after python
       :hook (python-mode . python-black-on-save-mode-enable-dwim))
     (use-package yaml-mode)
     (use-package rust-mode
       :defer t
       :mode "\\.rs\\'"
       :hook (rust-mode . (lambda () (setq index-tabs-mode nil)))
       :config (setq rust-format-on-save t))
   #+END_SRC
* Specific package configuration
** Org-mode
   Global keybindings and org mode configuration
   #+BEGIN_SRC emacs-lisp
   (require 'org)
   (define-key org-mode-map (kbd "C-c a") 'org-agenda)
   (define-key org-mode-map (kbd "C-c l") 'org-store-link)
   (setq org-log-done t)  ;; log data/time when todo is set to done
   (require 'org-tempo)
   #+END_SRC
   Org mode hook with org bullets:
   #+BEGIN_SRC emacs-lisp
   (require 'org-bullets)
   (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1)))
   (add-hook 'org-mode-hook (lambda() (visual-line-mode 1)))
   #+END_SRC
   Make windmove work also with org mode. [[https://orgmode.org/manual/Conflicts.html][org mode doc]]
   #+BEGIN_SRC emacs-lisp   
   (add-hook 'org-shiftup-final-hook 'windmove-up)
   (add-hook 'org-shiftleft-final-hook 'windmove-left)
   (add-hook 'org-shiftdown-final-hook 'windmove-down)
   (add-hook 'org-shiftright-final-hook 'windmove-right)
   #+END_SRC
   Highlight code when converting to pdf with latex:
   #+BEGIN_SRC emacs-lisp
     (require 'ox-latex)
     (add-to-list 'org-latex-packages-alist '("" "minted"))
     (setq org-latex-listings 'minted)
     (setq org-latex-pdf-process
     '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
       "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
       "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
     (setq org-src-fontify-natively t)
   #+END_SRC
   Org-roam
   #+BEGIN_SRC emacs-lisp
   (use-package org-roam
  :custom
   (org-roam-directory "/home/xar/Notes/org-roam")
   (org-roam-completion-everywhere t)
   :bind (("C-c n l" . org-roam-buffer-toggle)
          ("C-c n f" . org-roam-node-find)
          ("C-c n i" . org-roam-node-insert))
   :config
   (org-roam-setup))
   #+END_SRC
** Projectile
   #+BEGIN_SRC emacs-lisp
   (require 'projectile)
   (define-key projectile-mode-map (kbd "C-c p") projectile-command-map)
   (projectile-mode +1)
   #+END_SRC
** Helm
   #+BEGIN_SRC emacs-lisp
     (require 'helm-projectile)
     (helm-projectile-on)
     (setq helm-rg-default-directory 'git-root)
   #+END_SRC
** Rainbow-delimiters
   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
   #+END_SRC
** Clang-format
   #+BEGIN_SRC emacs-lisp
   (require 'clang-format)
   (setq clang-format-style "file")
   (defun clang-format-buffer-smart () ;; thx eklitzke
     "Reformat the buffer only if project root contains .clang-format"
     (when (and (f-exists? (expand-file-name ".clang-format" (projectile-project-root)))
                (or (string-equal major-mode "c-mode") (string-equal major-mode "c++-mode")))
       (clang-format-buffer)))
   (add-hook 'c-mode-hook
     (function (lambda ()
     (add-hook 'before-save-hook 'clang-format-buffer-smart))))
   (add-hook 'c++-mode-hook
     (function (lambda ()
     (add-hook 'before-save-hook 'clang-format-buffer-smart))))
   #+END_SRC
** Csharp things
   Line ending
   #+BEGIN_SRC emacs-lisp
     (require 'csharp-mode)
     (add-hook 'csharp-mode (setq buffer-file-coding-system 'dos))
   #+END_SRC
** Python things
   Autopep8 on save (similar to auto clang-format)
   #+BEGIN_SRC emacs-lisp
     (require 'py-autopep8)
     (add-hook 'python-mode-hook 'py-autopep8-mode)
     (setq py-autopep8-options '("--max-line-length=100" "--aggressive"))
   #+END_SRC
** Csharp things
   Because omnisharp seems to look for the server at the store path
   #+BEGIN_SRC emacs-lisp
   (setq lsp-csharp-omnisharp-roslyn-store-path "/home/xar/Repos/coucou/emacs.d/.cache/lsp/omnisharp-roslyn/latest/omnisharp-roslyn/OmniSharp")
   #+END_SRC
** Tree-sitter
   Tree-sitter because I ran into font-lock-mode infinite loop when opening a docstring in python
   #+BEGIN_SRC emacs-lisp
     (global-tree-sitter-mode)
     (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
   #+END_SRC
* Keybindings
** Helm
   #+BEGIN_SRC emacs-lisp
   (require 'helm)
   (define-key helm-map (kbd "TAB") 'helm-execute-persistent-action)
   (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
   (define-key helm-map (kbd "C-z") 'helm-select-action)

   (global-set-key (kbd "M-x") 'helm-M-x)
   (global-set-key (kbd "C-x r b") 'helm-filtered-bookmarks)
   (global-set-key (kbd "C-x C-f") 'helm-find-files)
   (global-set-key (kbd "C-x b") 'helm-mini)
   #+END_SRC
** Misc
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-c g") 'magit-status)
   (global-set-key (kbd "C-c t") 'treemacs)
   (global-set-key (kbd "M-s M-s") 'whitespace-mode)
   (global-set-key (kbd "C-c p") 'company-complete)
   #+END_SRC
* Theme
  #+BEGIN_SRC emacs-lisp
  (load-theme 'doom-one t)
  (add-to-list 'default-frame-alist
               '(font . "Fira Code Medium-11"))
  #+END_SRC
